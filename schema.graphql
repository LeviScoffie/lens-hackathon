type Protocol @entity {
  id: ID!
  totalUsers: BigInt!
}

type Account @entity {
  id: Bytes!
  profile: [Profile!] @derivedFrom(field: "owner")
}

type Profile @entity {
  id: ID!
  creator: Bytes!
  owner: Account!
  handle: String!
  imageURI: String!
  followModule: String!
  followModuleReturnData: Bytes!
  followNFTURI: String!
  timestamp: BigInt!
  post: [Post!] @derivedFrom(field: "profile")
  mirror: [Mirror!] @derivedFrom(field: "profile")
}

type Post @entity {
  id: ID!
  profile: Profile!
  contentURI: String!
  collectModule: Bytes!
  collectModuleReturnData: Bytes!
  refernceModule: Bytes!
  refenceModuleReturnData: Bytes!
  timestamp: BigInt!
}

type Mirror @entity {
  id: ID!
  profile: Profile!
  profileIdPointed: BigInt!
  pubIdPointed: BigInt!
  referenceModuleData: Bytes!
  referenceModule: Bytes!
  referenceModuleReturnData: Bytes!
  timestamp: BigInt!
}

type FollowModule @entity {
  id: ID!
  profile: Profile!
}

type ProfileFollowing @entity {
  " followerProfile - followingProfile "
  id: ID!
  follower: Profile!
  following: Profile!
  followerCount: BigInt!
  followingCount: BigInt!
}

type FollowNFTDeployed @entity {
  id: ID!
  followNFT: BigInt!
  timestamp: BigInt!
}

type FollowNFTInitialized @entity {
  id: ID!
  timestamp: BigInt!
}

type FollowNFTTransfered @entity {
  id: ID!
  profile: Profile!
  followNFTId: BigInt!
  from: BigInt!
  to: BigInt!
  timestamp: BigInt!
}

type FollowNFTURISet @entity {
  id: ID!
  profile: Profile!
  followModule: Bytes!
  followModuleReturnData: Bytes!
  timestamp: BigInt!
}

type FollowsApproved @entity {
  id: ID!
  profile: Profile!
  addresses: BigInt!
  approved: Boolean!
  timestamp: BigInt!
}
